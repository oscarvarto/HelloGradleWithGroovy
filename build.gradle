plugins {
    id 'java'
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'io.freefair.lombok' version '6.3.0'
    id 'org.checkerframework' version '0.6.44'
    id 'com.diffplug.spotless' version "7.0.0.BETA2"
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.functionaljava:functionaljava:5.0'
    implementation 'com.google.guava:guava:33.3.0-jre'
    implementation 'ch.qos.logback:logback-classic:1.5.8'
    implementation 'org.slf4j:slf4j-api:2.1.0-alpha1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.0-rc1'
    implementation 'com.opencsv:opencsv:5.9'

    compileOnly 'org.checkerframework:checker-qual:3.47.0'
    testCompileOnly 'org.checkerframework:checker-qual:3.47.0'
    checkerFramework 'org.checkerframework:checker:3.47.0'
    implementation 'org.checkerframework:checker-util:3.47.0'

    testImplementation 'org.testng:testng:7.10.2'
    testImplementation 'org.assertj:assertj-core:3.26.3'

    compileOnly 'org.projectlombok:lombok:1.18.34'
    // compileOnly 'org.projectlombok:lombok:1.18.22'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.addAll([
            '--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
            '-Xmaxerrs', '10000',
            '-Xmaxwarns', '10000',
            '-Awarns'
    ])
}

spotless {
    java {
        eclipse().configFile("${rootProject.projectDir}/eclipse-java-google-style.xml")
        importOrder('','\\#')
                   .wildcardsLast(false)
                   .semanticSort()
        removeUnusedImports()
        formatAnnotations()
    }
}

checkerFramework {
    checkers = [
        'org.checkerframework.checker.nullness.NullnessChecker'
    ]
}

test {
    useTestNG()
    maxHeapSize = '8G'
}

wrapper {
    gradleVersion = '7.3'
}